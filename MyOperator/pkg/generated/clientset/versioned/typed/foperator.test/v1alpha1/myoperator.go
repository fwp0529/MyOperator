/*
   Copyright 2023 Sangfor Technologies. All rights reserved.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "MyOperator/pkg/apis/foperator.test/v1alpha1"
	scheme "MyOperator/pkg/generated/clientset/versioned/scheme"
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MyOperatorsGetter has a method to return a MyOperatorInterface.
// A group's client should implement this interface.
type MyOperatorsGetter interface {
	MyOperators(namespace string) MyOperatorInterface
}

// MyOperatorInterface has methods to work with MyOperator resources.
type MyOperatorInterface interface {
	Create(ctx context.Context, myOperator *v1alpha1.MyOperator, opts v1.CreateOptions) (*v1alpha1.MyOperator, error)
	Update(ctx context.Context, myOperator *v1alpha1.MyOperator, opts v1.UpdateOptions) (*v1alpha1.MyOperator, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.MyOperator, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.MyOperatorList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MyOperator, err error)
	MyOperatorExpansion
}

// myOperators implements MyOperatorInterface
type myOperators struct {
	client rest.Interface
	ns     string
}

// newMyOperators returns a MyOperators
func newMyOperators(c *FoperatorV1alpha1Client, namespace string) *myOperators {
	return &myOperators{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the myOperator, and returns the corresponding myOperator object, and an error if there is any.
func (c *myOperators) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.MyOperator, err error) {
	result = &v1alpha1.MyOperator{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("myoperators").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MyOperators that match those selectors.
func (c *myOperators) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.MyOperatorList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.MyOperatorList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("myoperators").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested myOperators.
func (c *myOperators) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("myoperators").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a myOperator and creates it.  Returns the server's representation of the myOperator, and an error, if there is any.
func (c *myOperators) Create(ctx context.Context, myOperator *v1alpha1.MyOperator, opts v1.CreateOptions) (result *v1alpha1.MyOperator, err error) {
	result = &v1alpha1.MyOperator{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("myoperators").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(myOperator).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a myOperator and updates it. Returns the server's representation of the myOperator, and an error, if there is any.
func (c *myOperators) Update(ctx context.Context, myOperator *v1alpha1.MyOperator, opts v1.UpdateOptions) (result *v1alpha1.MyOperator, err error) {
	result = &v1alpha1.MyOperator{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("myoperators").
		Name(myOperator.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(myOperator).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the myOperator and deletes it. Returns an error if one occurs.
func (c *myOperators) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("myoperators").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *myOperators) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("myoperators").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched myOperator.
func (c *myOperators) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.MyOperator, err error) {
	result = &v1alpha1.MyOperator{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("myoperators").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
