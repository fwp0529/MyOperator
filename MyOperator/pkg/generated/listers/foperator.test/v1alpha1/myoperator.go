/*
   Copyright 2023 Sangfor Technologies. All rights reserved.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "MyOperator/pkg/apis/foperator.test/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyOperatorLister helps list MyOperators.
// All objects returned here must be treated as read-only.
type MyOperatorLister interface {
	// List lists all MyOperators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyOperator, err error)
	// MyOperators returns an object that can list and get MyOperators.
	MyOperators(namespace string) MyOperatorNamespaceLister
	MyOperatorListerExpansion
}

// myOperatorLister implements the MyOperatorLister interface.
type myOperatorLister struct {
	indexer cache.Indexer
}

// NewMyOperatorLister returns a new MyOperatorLister.
func NewMyOperatorLister(indexer cache.Indexer) MyOperatorLister {
	return &myOperatorLister{indexer: indexer}
}

// List lists all MyOperators in the indexer.
func (s *myOperatorLister) List(selector labels.Selector) (ret []*v1alpha1.MyOperator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyOperator))
	})
	return ret, err
}

// MyOperators returns an object that can list and get MyOperators.
func (s *myOperatorLister) MyOperators(namespace string) MyOperatorNamespaceLister {
	return myOperatorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyOperatorNamespaceLister helps list and get MyOperators.
// All objects returned here must be treated as read-only.
type MyOperatorNamespaceLister interface {
	// List lists all MyOperators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MyOperator, err error)
	// Get retrieves the MyOperator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MyOperator, error)
	MyOperatorNamespaceListerExpansion
}

// myOperatorNamespaceLister implements the MyOperatorNamespaceLister
// interface.
type myOperatorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyOperators in the indexer for a given namespace.
func (s myOperatorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MyOperator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MyOperator))
	})
	return ret, err
}

// Get retrieves the MyOperator from the indexer for a given namespace and name.
func (s myOperatorNamespaceLister) Get(name string) (*v1alpha1.MyOperator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("myoperator"), name)
	}
	return obj.(*v1alpha1.MyOperator), nil
}
